/**********************************************************************
 *
 *   Component generated by Quest
 *
 *   WARNING: By editing this component by hand, you will lose the ability to regenerate the code without conflicts.
 *   To preseve that abilty, always export from Quest to regenerate this file.
 *   To setup props, bindings and actions, use the Quest editor
 *   Code Logic goes in the hook associated with this component
 *
 *   For help and further details refer to: https://www.quest.ai/docs
 *
 *
 **********************************************************************/

import React from 'react';
import {
  Card,
  CardHeader,
  CardContent,
  Typography,
  CardActions,
  Button,
} from '@mui/material';
import { Helmet } from 'react-helmet';
import { styled } from '@mui/material/styles';
import { TestCardProps } from 'src/types';
import useTestCard from 'src/components/TestCard/useTestCard';

const TestCard1: any = styled('div')({
  display: `flex`,
  position: `relative`,
  isolation: `isolate`,
  flexDirection: `column`,
  justifyContent: `flex-start`,
  alignItems: `flex-start`,
  padding: `0px`,
  boxSizing: `border-box`,
  height: 'auto',
  width: 'fit-content',
});

const CardHeader1: any = styled(CardHeader)(({ theme }: any) => ({
  alignSelf: `stretch`,
  margin: `0px`,
  color: theme.palette['text']['primary'],
  fontStyle: theme.typography['typography']['h3'].fontStyle,
  fontFamily: theme.typography['typography']['h3'].fontFamily,
  fontWeight: theme.typography['typography']['h3'].fontWeight,
  fontSize: theme.typography['typography']['h3'].fontSize,
  letterSpacing: theme.typography['typography']['h3'].letterSpacing,
  lineHeight: theme.typography['typography']['h3'].lineHeight,
  textDecoration: theme.typography['typography']['h3'].textDecoration,
  textTransform: theme.typography['typography']['h3'].textTransform,
}));

const Typography1: any = styled(Typography)(({ theme }: any) => ({
  alignSelf: `stretch`,
  margin: `0px`,
  color: theme.palette['text']['primary'],
  fontStyle: theme.typography['typography']['body1'].fontStyle,
  fontFamily: theme.typography['typography']['body1'].fontFamily,
  fontWeight: theme.typography['typography']['body1'].fontWeight,
  fontSize: theme.typography['typography']['body1'].fontSize,
  letterSpacing: theme.typography['typography']['body1'].letterSpacing,
  lineHeight: theme.typography['typography']['body1'].lineHeight,
  textDecoration: theme.typography['typography']['body1'].textDecoration,
  textTransform: theme.typography['typography']['body1'].textTransform,
}));

const CardContent1: any = styled(CardContent)(({ theme }: any) => ({
  alignSelf: `stretch`,
  margin: `0px`,
}));

const Button1: any = styled(Button)(({ theme }: any) => ({
  margin: `0px`,
  color: theme.palette['primary']['contrast'],
  fontStyle: theme.typography['components']['button-large'].fontStyle,
  fontFamily: theme.typography['components']['button-large'].fontFamily,
  fontWeight: theme.typography['components']['button-large'].fontWeight,
  fontSize: theme.typography['components']['button-large'].fontSize,
  letterSpacing: theme.typography['components']['button-large'].letterSpacing,
  lineHeight: theme.typography['components']['button-large'].lineHeight,
  textDecoration: theme.typography['components']['button-large'].textDecoration,
  textTransform: theme.typography['components']['button-large'].textTransform,
}));

const ExternalLink: any = styled('a')({
  width: `101px`,
  textDecoration: `none`,
});

const CardActions1: any = styled(CardActions)(({ theme }: any) => ({
  alignSelf: `stretch`,
  margin: `0px`,
}));

const Card1: any = styled(Card)(({ theme }: any) => ({
  width: `600px`,
  margin: `0px`,
}));

function TestCard(props: TestCardProps): JSX.Element {
  const { fns } = useTestCard(props);

  return (
    <TestCard1 className={props.className}>
      <Helmet>
        <title>TestCard</title>
      </Helmet>
      <Card1>
        <CardHeader1 title={'Lorem Ipsum'} />
        <CardContent1>
          <Typography1 variant={'body1'} gutterBottom={false}>
            {
              'Lorem ipsum dolor sit amet consectetur. Fames euismod nec lorem sit vitae ullamcorper volutpat sapien suspendisse.'
            }
          </Typography1>
        </CardContent1>
        <CardActions1>
          <ExternalLink href="http://www.gogle.com">
            <Button1
              size={'large'}
              color={'primary'}
              disabled={false}
              variant={'contained'}
              onClick={fns.handleButtonClick}
            >
              {'Action'}
            </Button1>
          </ExternalLink>
        </CardActions1>
      </Card1>
    </TestCard1>
  );
}

export default TestCard;
